name: publish_vscode

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main", "docs" ]

jobs:
  # Phase 1: Build the extension on all platforms.
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            code-target: win32-x64
          - os: windows-latest
            target: aarch64-pc-windows-msvc
            code-target: win32-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-gnu
            code-target: linux-x64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-gnu
            code-target: linux-arm64
            arch: aarch64
          - os: ubuntu-20.04
            target: arm-unknown-linux-gnueabihf
            code-target: linux-armhf
            arch: armv7
          - os: macos-latest
            target: x86_64-apple-darwin
            code-target: darwin-x64
          - os: macos-14
            target: aarch64-apple-darwin
            code-target: darwin-arm64
          - os: ubuntu-20.04
            target: x86_64-unknown-linux-musl
            code-target: alpine-x64
            arch: x86_64
          - os: ubuntu-20.04
            target: aarch64-unknown-linux-musl
            code-target: alpine-arm64
            arch: aarch64

    name: Build (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    container: ${{ matrix.container }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      # Install Python dependencies (including Tach's native binary).
      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # ARM builds on macOS, which should select Tach's universal binary.
      - run: arch -arm64 python -m pip install -t ./lsp/vscode/bundled/libs --implementation py --no-deps --upgrade -r ./lsp/vscode/requirements.txt
        if: ${{ startsWith(matrix.os, 'macos') && startsWith(matrix.target, 'aarch64') }}

      # x86_64 builds on macOS, which should select Tach's x86_64 binary.
      - run: arch -x86_64 python -m pip install -t ./lsp/vscode/bundled/libs --implementation py --no-deps --upgrade -r ./lsp/vscode/requirements.txt
        if: ${{ startsWith(matrix.os, 'macos') && startsWith(matrix.target, 'x86_64') }}

      # ARM builds on Ubuntu, which should select Tach's ARM binary.
      - uses: uraimo/run-on-arch-action@v2
        if: ${{ startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.target, 'x86_64') && !endsWith(matrix.target, 'musl') }}
        with:
          arch: ${{ matrix.arch }}
          distro: ubuntu20.04
          install: |
            apt-get update
            apt-get install -y --no-install-recommends python3 python3-pip
            pip3 install -U pip
          run: |
            python3 -m pip install -t ./lsp/vscode/bundled/libs --implementation py --no-deps --upgrade -r ./lsp/vscode/requirements.txt

      # Alpine builds, which should select Tach's musl binaries.
      - uses: jirutka/setup-alpine@v1
        if: ${{ startsWith(matrix.os, 'ubuntu') && endsWith(matrix.target, 'musl') }}
        with:
          arch: ${{ matrix.arch }}
      - shell: alpine.sh --root {0}
        if: ${{ startsWith(matrix.os, 'ubuntu') && endsWith(matrix.target, 'musl') }}
        run: |
          apk add --no-cache python3 py3-pip
          python3 -m pip install -t ./lsp/vscode/bundled/libs --implementation py --no-deps --upgrade -r ./lsp/vscode/requirements.txt

      # Every other architecture, which should defer to `pip` without any special treatment.
      - run: python -m pip install -t ./lsp/vscode/bundled/libs --implementation py --no-deps --upgrade -r ./lsp/vscode/requirements.txt
        if: ${{ !startsWith(matrix.os, 'macos')
          && !(startsWith(matrix.os, 'ubuntu') && !startsWith(matrix.target, 'x86_64') && !endsWith(matrix.target, 'musl'))
          && !(startsWith(matrix.os, 'ubuntu') && endsWith(matrix.target, 'musl')) }}

      # Install Node.
      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # Install Node dependencies.
      - run: cd lsp/vscode && npm install
      # Build the extension.
      - name: Package Extension (release)
        run: npx vsce package -o "./lsp/vscode/dist/tach-${{ matrix.code-target }}.vsix" --target ${{ matrix.code-target }}

      # Upload the extension.
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.target }}
          path: ./lsp/vscode/dist

  # Phase 3: Publish the built extension to the Marketplace.
  publish:
    name: "Publish"
    needs: ["build"]
    runs-on: ubuntu-latest
    steps:
      - name: Install Nodejs
        uses: actions/setup-node@v3
        with:
          node-version: 20

      - name: Checkout repository
        uses: actions/checkout@v3

      # Download all built artifacts.
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-apple-darwin
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-apple-darwin
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-unknown-linux-gnu
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-arm-unknown-linux-gnueabihf
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-pc-windows-msvc
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-pc-windows-msvc
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-x86_64-unknown-linux-musl
          path: dist
      - uses: actions/download-artifact@v4
        with:
          name: dist-aarch64-unknown-linux-musl
          path: dist
      - run: ls -al ./lsp/vscode/dist

      # Install Node dependencies.
      - run: npm install

      # Publish to the Code Marketplace.
      - name: Publish Extension
        run: npx vsce publish --pat ${{ secrets.MARKETPLACE_TOKEN }} --packagePath ./lsp/vscode/dist/tach-*.vsix